/**
 * MIXINS
 * Sass mixins (including compass mixins)
 */



@mixin round($nw, $ne: $nw, $se: $nw, $sw: $nw){
	-moz-border-radius: $nw $ne $se $sw;
	-webkit-border-radius: $nw $ne $se $sw;
	border-radius: $nw $ne $se $sw;
}
@mixin round-nw($r){
	-moz-border-radius-topleft: $r;
	-webkit-border-top-left-radius: $r;
	border-top-left-radius: $r;
}
@mixin round-ne($r){
	-moz-border-radius-topright: $r;
	-webkit-border-top-right-radius: $r;
	border-top-right-radius: $r;
}
@mixin round-sw($r){
	-moz-border-radius-bottomleft: $r;
	-webkit-border-bottom-left-radius: $r;
	border-bottom-left-radius: $r;
}

@mixin round-se($r){
	-moz-border-radius-bottomright: $r;
	-webkit-border-bottom-right-radius: $r;
	border-bottom-right-radius: $r;
}

@mixin gradient($first, $second, $simpleIE: false) {
	background: $second;
	background: -webkit-gradient(linear, left top, left bottom, from($first), to($second));
	background: -moz-linear-gradient(top,  $first,  $second);
		@if $simpleIE != true {
				filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr='#{ie-hex-str($first)}', endColorstr='#{ie-hex-str($second)}');
				-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($first)}', endColorstr='#{ie-hex-str($second)}')";
	}
}

@mixin background-centering() {
	background-repeat: no-repeat;
	background-position: center top;
}

@mixin squarethumb($width){
	vertical-align: middle;
	display: inline-block;
	overflow: hidden;
	width: $width;
	height: $width;
	img{
		max-width: $width;
		min-height: $width;
	}
}

/**
* overflow-y becomes scrollable,
* fixes OSX vanishing scrollbar
*/
@mixin scrollable($bgColor: #fff) {
		overflow-y: auto;

		/* hide the default UA scrollbar */
		&::-webkit-scrollbar {
				-webkit-appearance: none;
				width: 11px;
				height: 30px;
		}

		/* fake the UA scrollbar (this one doesn't hide) */
		&::-webkit-scrollbar-thumb {
				border-radius: 8px;
				border: 2px solid $bgColor;
				background-color: rgba(0, 0, 0, .5);
		}
}

@mixin inlineblock() {
	display: inline-block;
	zoom: 1;
	*display: inline; }

@mixin box-shadow($color: #333333, $hoff: 1px, $voff: 1px, $blur: 5px, $spread: 0, $inset: false) {
	$full: $color $hoff $voff $blur $spread;
	@if $inset {
		@if not ($inset == true or $inset == inset) {
			@warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. The box shadow will be inset."; }
			$full: $full inset; }
	@if $color == none {
		@include experimental(box-shadow, none, -moz, -webkit, -o, not -ms, not -khtml, official); }
	@else {
		@include experimental(box-shadow, $full, -moz, -webkit, -o, not -ms, not -khtml, official);
	}
}

@mixin box-sizing($type : "border") {
	/* Acceptable values are border, content, and padding - content is the default W3C model */
	box-sizing: #{$type}-box;
	-webkit-box-sizing: #{$type}-box;
	-moz-box-sizing: #{$type}-box;
}

@mixin background-size( $size) {
	@include experimental(background-size, $size);
}

@mixin opacity($opacity) {
	opacity: $opacity;
	@if true {
		$value: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
		@include experimental(filter, $value, not -moz, not -webkit, not -o, -ms, not -khtml, official);
	}
}

/**
* punched_in_box_shadow
*
* selected state for nav items
* looks flat, and "punched in"
* overrides gradients, etc.
*/
@mixin punched_in_box_shadow {
	background-color: $C_line_less !important;
	background-image: none !important;;
	color: $C_darkgray_lightest !important;
	filter: none;
	@include box-shadow(rgba(0,0,0,.5), 1px, 1px, 3px, -1px, true);

	&:link, &:hover, &:vistied, &:active {
		color: $C_darkgray_lightest !important;
	}
}

// BUTTON COLOR
// Can be used for all clickable 3d affordance elements
@mixin button_color($base_color, $isLight: false){
	@include button_color_base($base_color, $isLight);

	&:hover {
		@include button_color_hover($base_color, $isLight);
	}

	&:active, &.selected, &.active {
		@include button_color_active($base_color, $isLight);
	}
}

// alias deprecated buttonColor to button_color
@mixin buttonColor($base_color, $isLight: false){
	@include button_color($base_color, $isLight);
}


// BUTTON COLOR COMPONENTS
// 90% of the time, you probably don't want to use these directly -- try button_color
@mixin button_color_base($base_color, $isLight: false){
	@include box-shadow( rgba(255,255,255,.2), 1px, 1px, 0, 0, true);
	border: 1px solid rgba(0,0,0,.15);
	@if $isLight{
		@include gradient($base_color, darken($base_color, 5%));
	}
	@else{
		@include gradient($base_color, darken($base_color, 10%));
	}
}
@mixin button_color_hover($base_color, $isLight: false){
	@if $isLight{
		$lighter_base_color: lighten($base_color, 5%);
		$darker: darken($base_color, 7%);
		@include gradient($lighter_base_color, $darker);
	}
	@else{
		$lighter_base_color: lighten($base_color, 5%);
		$darker: darken($base_color, 10%);
		@include gradient($lighter_base_color, $darker);
	}
}
@mixin button_color_active($base_color, $isLight: false){
	@if $isLight{
		background: darken($base_color, 10%);
	}
	@else{
		background: darken($base_color, 15%);
	}
	@include punched_in_box_shadow;
}

@mixin button_personality{
	@include experimental('user-select', 'none');
	cursor: pointer;
		text-decoration: none!important;
}

@mixin experimental($property, $value, $moz: true, $webkit: true, $o: false, $ms: true, $khtml: false, $official: true) {
	$value: unquote($value);
	@if $moz {
		-moz-#{$property}: $value; }
	@if $webkit {
		-webkit-#{$property}: $value; }
	@if $o {
		-o-#{$property}: $value; }
	@if $ms {
		-ms-#{$property}: $value; }
	@if $khtml {
		-khtml-#{$property}: $value; }
	@if $official {
		#{$property}: $value; } }


@mixin experimental-value($property, $value, $moz: true, $webkit: true, $o: false, $ms: true, $khtml: false, $official: true) {
	@if $moz {
		#{$property}: -moz-#{$value}; }
	@if $webkit {
		#{$property}: -webkit-#{$value}; }
	@if $o {
		#{$property}: -o-#{$value}; }
	@if $ms {
		#{$property}: -ms-#{$value}; }
	@if $khtml {
		#{$property}: -khtml-#{$value}; }
	@if $official {
		#{$property}: #{$value}; } }


// NOTE: This can probably be replaced with the @necolas clearfix, since it's
// terser and has fewer strange properties.
// nicolasgallagher.com/micro-clearfix-hack/
%clearfix {
	zoom: 1;
	&:after {
		content: ".";
		display: block;
		clear: both;
		visibility: hidden;
		line-height: 0;
		height: 0;
	}
}

@mixin clearfix {
	// @extend %clearfix;   // This is the goal state. Currently messes with mobile tabs and such if enabled. cleanup.
	zoom: 1;
	&:after {
		content: ".";
		display: block;
		clear: both;
		visibility: hidden;
		line-height: 0;
		height: 0;
	}
}

@mixin squarethumb($width){
	vertical-align: middle;
	display: inline-block;
	overflow: hidden;
	width: $width;
	height: $width;
	img{
		max-width: $width;
		min-height: $width;
	}
}

@mixin circle($color: black, $size: 12px){
	width: $size;
	height: $size;
	@include round($size/2);
	background: $color;
}

@mixin rotate($deg) {
	/* gave up on figuring out experimental mixin for now... */
	transform: rotate($deg);
	-ms-transform: rotate($deg);
	-webkit-transform-style: preserve-3d;
	-webkit-transform: rotateZ($deg);
	-o-transform: rotate($deg);
	-moz-transform: rotate($deg);
}

@mixin transform($transform, $only3d: false) {
	@if $only3d {
		@include experimental(transform, $transform, -moz, -webkit, -o, -ms, not -khtml, official);
	}
	@else {
		@include experimental(transform, $transform, -moz, -webkit, -o, -ms, not -khtml, official);
	}
}

@mixin transform-origin($t) {
	@include experimental(transform-origin, $t, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin transform-style($t) {
	@include experimental(transform-style, $t, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin perspective($p) {
	@include experimental(perspective, $p, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin transition($t) {
	@include experimental(transition, $t, -moz, -webkit, -o, -ms, not -khtml, official);
}

@mixin transform ($t) {
	@include experimental(transform, $t, -moz, -webkit, -o, not -ms, not -khtml, official);
}

@mixin backface-visibility($t) {
	@include experimental(backface-visibility, $t, -moz, -webkit, -o, not -ms, not -khtml, official);
}

@mixin transition-transform ($t) {
	-webkit-transition: -webkit-transform $t;
	-moz-transition: -moz-transform $t;
	-o-transition: -o-transform $t;
	transition: tranform $t;
}


@mixin background-clip($value:padding){
	-moz-background-clip: $value;
	-webkit-background-clip: $value;
	-o-background-clip: #{$value}-box;
	-ms-background-clip: #{$value}-box;
	-khtml-background-clip: #{$value}-box;
	background-clip: #{$value}-box;
}

@mixin triangle($direction: 'n', $color: black, $size: 6px){
	width: 0;
	height: 0;
	@if $direction == 'n'{
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
	@else if $direction == 'e'{
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	}
	@else if $direction == 's'{
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	}
	@else if $direction == 'w'{
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
}


@mixin input-placeholder(){
	$selectors: ('::-webkit-input-placeholder', ':-moz-placeholder', '::-moz-placeholder', ':-ms-input-placeholder');
	@each $s in $selectors{
		&#{$s}{
			@content;
		}
	}
}

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		/* on retina, use image that's scaled by 2 */
		background-image: url($image);
		background-size: $width $height;
	}
}


// TYPOGRAPHY

// various tricks to produce nice header text across browsers
@mixin nice-type{
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: subpixel-antialiased;
	//-webkit-text-stroke: .5px;
}

@mixin font-face($font-family, $url, $weight: normal, $style: normal) {
	@font-face {
		font-family: '#{$font-family}';
		font-weight: $weight;
		font-style: $style;
		src: url('#{$url}.eot?') format('eot'), url('#{$url}.woff') format('woff'), url('#{$url}.ttf') format('truetype');
	}
}





// #############################################################################################
// CRUSTYBASE MIXINS - DEPRECATED
// #############################################################################################

@mixin button_primary_color($base_color){
	@include gradient($base_color, darken($base_color, 10%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 20%);
	&:hover {
			$lighter_base_color: lighten($base_color, 5%);
			$darker: darken($base_color, 10%);
			@include gradient($lighter_base_color, $darker);
	}
	&:active {
			background: darken($base_color, 10%);
			@include box-shadow(mix(#000000, $base_color, 40%), 1px, 1px, 0, 0, true);
	}
}

@mixin button_secondary_color($base_color){
	@include gradient($base_color, darken($base_color, 7.5%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 10%);
	&:hover {
			$lighter_base_color: lighten($base_color, 5%);
			$darker: darken($base_color, 10%);
			@include gradient($lighter_base_color, $darker);
	}
	&:active {
			background: darken($base_color, 10%);
			@include box-shadow(mix(#000000, $base_color, 40%), 1px, 1px, 0, 0, true);
	}
}

@mixin button_disabled_color($base_color){
	@include gradient($base_color, darken($base_color, 10%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 20%);
	&:hover {
			@include gradient($base_color, darken($base_color, 10%));
			@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
			border: 1px solid darken($base_color, 20%);
	}
	&:active {
			@include gradient($base_color, darken($base_color, 10%));
			@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
			border: 1px solid darken($base_color, 20%);
	}
}

@mixin buttonize($base_color){
	display: inline;
	display: inline-block;
	$darker: $base_color - #444;
	@include gradient($base_color, $darker);
	border: 2px solid $darker;
	text-decoration: none;
	text-align: center;
	cursor: pointer;
	zoom: 1;
	font-weight: bold;
	font-family: arial, sans-serif;
	*cursor: hand;

  &:hover {
	$lighter_base_color: $base_color + #0a0a0a;
	$darker: $lighter_base_color - #444;
	@include gradient($lighter_base_color, $darker);
	border: 2px solid $darker;
	text-decoration: none; }

  &:active {
	background: $darker; }
}



@mixin facebookButton($paddingTop, $paddingBottom) {
	color: #fff !important;
	$base_color: $C_facebook;

	@include button_primary_color($C_facebook);
	@include round($defaultRadius);

	position: relative;
	padding-top: $paddingTop;
	padding-bottom: $paddingBottom;

	&:before {
		font-family: 'lucida grande',tahoma,verdana,arial,sans-serif;
		content: '\00a0';
		background: url('/img/f-logo.png') center center no-repeat;
		position: absolute;
		display: block;
		border-right: 1px solid mix(#ffffff, $base_color, 30%);
		@include box-shadow( darken($base_color, 10%), -1px, 0, 0, 0, true);
		left: 0px;
		top: 0px;
		text-align: center;
		padding-top: $paddingTop;
		padding-bottom: $paddingBottom;
		padding-left: 18px;
		padding-right: 18px;
	}
}

/*
 *
 *  @author     John Cockrell
 *  @date       2013-3-20
 *  @requires   SASS 3.2 or greater to compile. (`sass --version`)
 *  
 *  @description
 *  For now, this is a separate place to stash useful mixins that are
 *  currently only part of the mobile experience. 
 *
 *  If they're useful enough, merge this file in with _mixins.scss--
 *  I just don't want to add things that may complicate the fullsite
 *  implementation.
 *
 */



/*  m-box-shadow()
 *
 *  A variant of the main SQ mixin found in `_mixins.scss`. Based on our
 *  current browser support profile, the only extensions we need to support
 *  are old IE and old Webkit.
 *
 *  BB OS 6 ........ -webkit
 *  BB OS 7 ........ -webkit
 *  iOS 4.3 ........ -webkit
 *
 *  As our support profile changes, we can phase these vendor prefixes out
 *  of this mixin.
 */
@mixin m-box-shadow($color: #333333, $hoff: 1px, $voff: 1px, $blur: 5px, $spread: 0, $inset: false) {

	 @if $color == none {
		  $full: none; 
	 } @else {
		  $full: $color $hoff $voff $blur $spread;
		  @if $inset {
				$full: $full inset; 
		  }
	 }

	 -webkit-box-shadow: $full;
	 box-shadow: $full;
}


/*  m-gradient()
 *
 *  A variant of the main SQ mixin found in `_mixins.scss`. This CSS3 feature
 *  isn't particularly well supported unprefixed, even in "newer" browsers, so
 *  we'll need to have a prefixed version into the future.
 * 
 *  BB OS 6 + ...... -webkit
 *  Android 2.3 + .. -webkit
 *  iOS 4.3 + ...... -webkit
 *  WP 7.5 / IE9 ... progid
 *
 *  As our support profile changes, we can phase these vendor prefixes out
 *  of this mixin.
 */

@mixin m-gradient($first, $second) {

	 /* IE9, Windows Phone 7.5 */
	 -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($first)}', endColorstr='#{ie-hex-str($second)}')";  

	 /* IE10, Windows Phone 8, Based on Working Draft Syntax */
	 background-image: -ms-linear-gradient(top, $first 0%, $second 100%); 

	 /* Mobile Webkit (BB OS 6-10, Android 2.3-4.2, iOS 4.3-6.1) */
	 background-image: -webkit-linear-gradient(top, $first 0%, $second 100%);

	 /* Standards */
	 background-image: linear-gradient(top, $first 0%, $second 100%);
}



/*  loop_prop_list()
 *  
 *  This function is an awesome utility helper for more complex
 *  SASS mixins, where you might need to loop through property-value
 *  pairs stored in SASS arrays.
 *
 *  Outputs CSS attr/value pairs constructed from a property list.
 *  Total time saver, and should be used elsewhere.
 */
@mixin loop_prop_list($prop_list, $with_prefix:false) {

	 $prefixable_css3_attributes: 'transform';

	 $i: 1;
	 $max: length($prop_list) + 1;

	 @while $i < $max {
		  $a: nth($prop_list, $i);
		  $b: nth($prop_list, $i+1);
		  $i: $i+2;

		  $is_prefixable: false;

		  @if $with_prefix {
				@each $ix in $prefixable_css3_attributes {
					 @if $a == $ix {
						  $is_prefixable: true;
					 }
				}
		  }

		  @if $is_prefixable  {
				#{$with_prefix}-#{$a}: #{$b};

		  } @else {
				#{$a}: #{$b};
		  }
	 }
}


/*  DEVICE @MEDIA MIXINS
 *  
 *  phone()
 *  tablet()
 *  portrait()
 *  landscape()
 *
 *  Tablet and phone layouts have very different requirements and 
 *  ergonomic factors--and putting styles that work well on a phone
 *  onto a tablet makes everything look stretched like silly putty.
 *  (Vice-versa, and it looks equally shoddy.)
 *
 *  To avoid having to remember breakpoints and all that fun stuff,
 *  these mixins, `@tablet` and `@phone`.
 *
 *  These won't be the most accurate names, but they're pretty useful.
 *
 *  Again, these breakpoints are using CSS Pixels, which are the 
 *  measurement unit, not the hardware subelement.
 *
 *  And unfortunately, based on the way SASS works, I don't think we
 *  can encapsulate the looping process within each of these mixins.
 */

/* TODO these phone() and tablet() mixins are totally ill advised,
 * and we shouldn't use them (and I added them!) -j
 * 
 * Kill on cleanup.
 */
@mixin phone($selector, $prop_list) {
	 @media screen and (max-device-width: $phone_tablet_breakpoint) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {

				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;  

					 #{$a}: #{$b};
				}
		  } 
	 }
}
@mixin tablet($selector, $prop_list) {
	 @media screen and (min-device-width: $phone_tablet_breakpoint + 1) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {
				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;  

					 #{$a}: #{$b};
				}
		  } 
	 }
}
@mixin landscape($selector, $prop_list) {
	 @media screen and (orientation:landscape) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {

				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;  

					 #{$a}: #{$b};
				}
		  }
	 }
}
@mixin portrait($selector, $prop_list) {
	 @media screen and (orientation:portrait) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {
				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;  

					 #{$a}: #{$b};
				}
		  }
	 }
}





/*  truncate()
 *
 *  Makes a line of `display:box` text truncate to an
 *  ellipsis using CSS3 `text-overflow` if available.
 *
 *  TODO This is better served by an extend in the new lists layout.
 *  Kill on cleanup.
 */
@mixin truncate() {
	 white-space: nowrap;
	 overflow: hidden;
	 text-overflow: ellipsis;
};



/*  border-box()
 *
 *  Used to do an x-browser border-box layout.
 *  Most likely redundant somewhere.
 *
 *  NOTE
 *  Should be deprecated in favor of `@box-sizing('border')`
 *
 *  TODO Kill on cleanup. This is redundant.
 */
@mixin border-box {
	 -webkit-box-sizing: border-box;
	 -moz-box-sizing: border-box;
	 box-sizing: border-box;
};



/*  shaded()
 *
 *  Not sure what this really does; used once, and appeared
 *  naked in _sassquatch_m.scss     -j
 */
@mixin shaded($color: $C_shade) {
	background:$color;
}



/*  ANIMATION MIXINS {
 *
 *  A collection of mixins that are used to generate keyframe
 *  animation in CSS. Used on mobile to make animations
 *  buttery smooth.
 *
 *  animate() ................. Creates complete animation statement
 *                              with a keyframe animation, easing, and
 *                              duration reference.
 *  transition() .............. CSS Transition maker
 *  loop_keyframe_list() ...... SASS list helper for keyframe()
 *  keyframe()  ............... keyframe animations
 */

@mixin animate($name, $duration, $iteration_count, $timing_fn, $use_browser_prefixes:true) {

	 /*  We're interpolating the inputs here in case they're wrapped
	  *  in strings from use in the mixins.
	  */
	 @if $use_browser_prefixes == true {
		  -webkit-animation-name: #{$name};
		  -webkit-animation-duration: #{$duration};
		  -webkit-animation-iteration-count: #{$iteration_count};
		  -webkit-animation-timing-function: #{$timing_fn};

		  -moz-animation-name: #{$name};
		  -moz-animation-duration: #{$duration};
		  -moz-animation-iteration-count: #{$iteration_count};
		  -moz-animation-timing-function: #{$timing_fn};

		  -o-animation-name: #{$name};
		  -o-animation-duration: #{$duration};
		  -o-animation-iteration-count: #{$iteration_count};
		  -o-animation-timing-function: #{$timing_fn};
	 }

	 animation-name: #{$name};
	 animation-duration: #{$duration};
	 animation-iteration-count: #{$iteration_count};
	 animation-timing-function: #{$timing_fn};
}

@mixin transition($prop, $duration:0, $timing_fn:'', $use_browser_prefixes:true) { 

	 /*  We're interpolating the inputs here in case they're wrapped
	  *  in strings from use in the mixins.
	  */
	
	 @if $use_browser_prefixes {
		  -webkit-transition: #{$prop} #{$duration} #{$timing_fn};
		  -moz-transition: #{$prop} #{$duration} #{$timing_fn};
		  -o-transition: #{$prop} #{$duration} #{$timing_fn};
	 }

	 transition: #{$prop} #{$duration} #{$timing_fn};
}

/*  @mixin loop_keyframe_list
 *
 *  Loops a keyframe list. Pretty much only used here, but a bunch.
 *  Depends on `@mixin loop_prop_list`.
 */
@mixin loop_keyframe_list($keyframe_list, $with_prefix:false) {
	 @each $frame in $keyframe_list {
		  $stop: nth($frame, 1);
		  $frame_prop_list: nth($frame, 2);

		  #{$stop} {
				@include loop_prop_list($frame_prop_list, $with_prefix);
		  }
	 }
}



/*  @mixin keyframe
 *
 *  Outputs a completed @keyframe statement that can be 
 *  used with CSS animations.
 */
@mixin keyframe($name, $keyframe_list, $use_browser_prefixes:true) {

	 @if $use_browser_prefixes {
		  /*  we can't interpolate into an @keyframes statement, which is
			*  why we're doing it this way, instead of with an @each 
			*/
		  @-webkit-keyframes #{$name} {
				@include loop_keyframe_list($keyframe_list, '-webkit');
		  }
		  @-moz-keyframes #{$name} {
				@include loop_keyframe_list($keyframe_list, '-moz');
		  }
		  @-o-keyframes #{$name} {
				@include loop_keyframe_list($keyframe_list, '-o');
		  }
	 }


	 /*  Official CSS3 Spec.
	  *
	  *  Used a few places, like high-version FF and 
	  *  IE10. (Maybe others, too!)
	  */
	 @keyframes #{$name} {
		  @include loop_keyframe_list($keyframe_list);
	 }
}
/*  }   */
